package com.admin.luntan.util;import org.apache.commons.lang3.math.NumberUtils;import org.apache.ibatis.executor.Executor;import org.apache.ibatis.mapping.MappedStatement;import org.apache.ibatis.plugin.Interceptor;import org.apache.ibatis.plugin.Intercepts;import org.apache.ibatis.plugin.Invocation;import org.apache.ibatis.plugin.Plugin;import org.apache.ibatis.plugin.Signature;import org.apache.ibatis.session.ResultHandler;import org.apache.ibatis.session.RowBounds;import java.util.Properties;/** * SQL监控，Mybatis插件 * <p>默认情况下，MyBatis 允许使用插件来拦截的方法调用包括：</p> * <ul><li>拦截执行器的方法，Executor (update, query, flushStatements, commit, rollback, getTransaction, close, isClosed)</li> * <li>拦截参数的处理，ParameterHandler (getParameterObject, setParameters)</li> * <li>拦截结果集的处理，ResultSetHandler (handleResultSets, handleOutputParameters)</li> * <li>拦截Sql语法构建的处理，StatementHandler (prepare, parameterize, batch, update, query)</li></ul> * @author BBF */@Intercepts({    @Signature(type = Executor.class, method = "update", args = {MappedStatement.class,        Object.class}),    @Signature(type = Executor.class, method = "query", args = {MappedStatement.class,        Object.class, RowBounds.class, ResultHandler.class})})public class SQLMonitorPlugin implements Interceptor {  /**   * 是否监控显示SQL   */  private static final boolean SHOWSQL;  /**   * 慢SQL时间   */  private static final int SLOWER;  private static final int MAXCOUNT;  static {    String _showSql = "1";    SHOWSQL = StringUtil.equals("1", _showSql);    SLOWER = NumberUtils.toInt("3000", 3000);    MAXCOUNT = NumberUtils.toInt("80", 50);  }  public SQLMonitorPlugin() {  }  public Object intercept(Invocation invocation) throws Throwable {    return MyBatisSQLMonitorPlugin.intercept(invocation, SHOWSQL, SLOWER, MAXCOUNT);  }  public Object plugin(Object target) {    return Plugin.wrap(target, this);  }  public void setProperties(Properties properties) {  }}